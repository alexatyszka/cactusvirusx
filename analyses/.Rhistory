test <- get.tree.dist(cross.data,nj.gg)
data <- c("Virus from SRR11603183 GW-peel-2", "Virus from SRR11603182 GW-peel-3")
cross.data <- expand.grid(tip1 = data, tip2 = data)
d<- c()
get.tree.dist = function(solcross.data,pathd8.tre)
{
for(i in 1:length(solcross.data$tip1))
{
ifelse(is.na(match(solcross.data$tip1[i],pathd8.tre$tip.label)) | is.na(match(solcross.data$tip2[i],pathd8.tre$tip.label)),d[i]<-NA,
d[i]<-cophenetic.phylo(pathd8.tre)[solcross.data$tip1[i],solcross.data$tip2[i]])
}
return(d)
}
test <- get.tree.dist(cross.data,nj.gg)
mean(test)
data <- c("Virus from SRR11603183 GW-peel-2", "Virus from SRR11603182 GW-peel-3")
cross.data <- expand.grid(tip1 = data, tip2 = data)
test <- get.tree.dist(cross.data,nj.gg)
mean(test)
data <- c("Virus from SRR11190798 Plant: DH-3", "Virus from SRR11190801 Plant: DH-2")
cross.data <- expand.grid(tip1 = data, tip2 = data)
test <- get.tree.dist(cross.data,nj.gg)
mean(test)
test
data <- c("Virus from SRR11603183 GW-peel-2", "Virus from SRR11603182 GW-peel-3")
cross.data <- expand.grid(tip1 = data, tip2 = data)
test <- get.tree.dist(cross.data,nj.gg)
test
mean(test[test!=0])
#create example list, or use your own for specific pairs. for all combos use dist.nodes(nj.gg)
data <- c("Virus from SRR11190799 Plant: BSJ-3", "Virus from SRR11190791 Plant: BSJ-1", "Virus from SRR11190800 Plant: BSJ-2")
cross.data <- expand.grid(tip1 = data, tip2 = data)
test <- get.tree.dist(cross.data,nj.gg)
mean(test[test!=0])
get.tree.dist = function(solcross.data,pathd8.tre)
{
for(i in 1:length(solcross.data$tip1))
{
ifelse(is.na(match(solcross.data$tip1[i],pathd8.tre$tip.label)) | is.na(match(solcross.data$tip2[i],pathd8.tre$tip.label)),d[i]<-NA,
d[i]<-cophenetic.phylo(pathd8.tre)[solcross.data$tip1[i],solcross.data$tip2[i]])
}
return(d)
}
test <- get.tree.dist(cross.data,nj.gg)
mean(test[test!=0])
#create example list, or use your own for specific pairs. for all combos use dist.nodes(nj.gg)
data <- c("Virus from SRR11190799 Plant: BSJ-3", "Virus from SRR11190791 Plant: BSJ-1", "Virus from SRR11190800 Plant: BSJ-2")
cross.data <- expand.grid(tip1 = data, tip2 = data)
d<- c()
test <- get.tree.dist(cross.data,nj.gg)
mean(test[test!=0])
test
data <- c("Schlumbergera_truncata_15H-03_pol_S48_potexvirus_-_NC_002815_consensus_sequence", "Schlumbergera_truncata__15H3__s_S50_potexvirus_-_NC_002815_consensus_sequence", "Schlumbergera_truncata_15H3_sty_S73_potexvirus_-_NC_002815_consensus_sequence")
cross.data <- expand.grid(tip1 = data, tip2 = data)
d<- c()
test <- get.tree.dist(cross.data,nj.gg)
mean(test[test!=0])
test <- get.tree.dist(cross.data,nj.gg)
test
data <- c("Schlumbergera_truncata_15H-03_pol_S48_potexvirus_-_NC_002815_consensus_sequence", "Schlumbergera_truncata__15H3__s_S50_potexvirus_-_NC_002815_consensus_sequence", "Schlumbergera_truncata_15H3_sty_S73_potexvirus_-_NC_002815_consensus_sequence")
cophenetic.phylo(nj.gg)["Schlumbergera_truncata_15H-03_pol_S48_potexvirus_-_NC_002815_consensus_sequence", "Schlumbergera_truncata__15H3__s_S50_potexvirus_-_NC_002815_consensus_sequence"]
data <- c("Virus from 15H-03_pol_S48", "Virus from 15H3_sty_S73","Virus from 15H3__s_S50")
cross.data <- expand.grid(tip1 = data, tip2 = data)
d<- c()
test <- get.tree.dist(cross.data,nj.gg)
test
table(test)
heatmap(test)
heatmap(cophenetic.phylo(nj.gg))
heatmap.2(cophenetic.phylo(nj.gg))
heatmap(cophenetic.phylo(nj.gg), cexRow = 0.5, cexCol = 0.5)
heatmap(cophenetic.phylo(nj.gg), cexRow = 0.1, cexCol = 0.1)
heatmap(cophenetic.phylo(nj.gg), cexRow = 0.2, cexCol = 0.2)
heatmap(cophenetic.phylo(nj.gg), cexRow = 0.2, cexCol = 0.2)
library(ggtree) # tree plotting
library(DECIPHER)
library(RCurl) # web page loading
library(phangorn)
library(phytools)
library(ape)
library("knitr")
library(DECIPHER)
aln.fasta.loc <- 'https://raw.githubusercontent.com/pseudocrater/cactusvirusx/master/data/genbank_KR_viruses_consensus_aln.fasta'
cvx.init.aln.fasta <- getURL(aln.fasta.loc)
cvx.unaln.fasta <- getURL(cvx.unaln.fasta.loc)
write(cvx.unaln.fasta, file = 'cvx.unaln.fasta')
cvx.seq.metadata.csv <-getURL(metadata.loc)
write(x=cvx.seq.metadata.csv, file='cvx.seq.metadata.csv')
cvx.metadata <- read.csv('cvx.seq.metadata.csv', stringsAsFactors = FALSE)
#alphabetize metadata, only needs to be done once:
#cvx.metadata <- cvx.metadata[order(cvx.metadata$Name),]
#write.csv(cvx.metadata, file="test.csv")
#cvx.metadata <- read.csv('test.csv', stringsAsFactors = FALSE)
write(x=cvx.seq.metadata.csv, file='cvx.seq.metadata.csv')
write(cvx.init.aln.fasta, file = 'cvx.init.aln.fasta')
cacti.aln <- read.dna(file = 'cvx.init.aln.fasta', format= "fasta")
cvx.aln.phy <- read.phyDat('cvx.init.aln.fasta', format='fasta', type='DNA')
cvx.aln.bin <- as.DNAbin(cvx.aln.phy)
cvx.nj <- NJ(dist.dna(cvx.aln.bin))
write.tree(cvx.nj, file="cvx.njtree.nwk")
nj.gg <- read.tree(file="cvx.njtree.nwk")
nj.gg <- midpoint.root(nj.gg)
#create vector for host information
hostinfo <- data.frame(nj.gg$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$nj.gg.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- read.tree(file="cvx.njtree.nwk")
nj.gg <- midpoint.root(nj.gg)
nj.gg <- tip.rename.org(nj.gg,cvx.metadata)
cross.data <- expand.grid(tip1 = nj.gg$tip.label, tip2 = nj.gg$tip.label)
d<- c()
get.tree.dist = function(solcross.data,pathd8.tre)
{
for(i in 1:length(solcross.data$tip1))
{
ifelse(is.na(match(solcross.data$tip1[i],pathd8.tre$tip.label)) | is.na(match(solcross.data$tip2[i],pathd8.tre$tip.label)),d[i]<-NA,
d[i]<-cophenetic.phylo(pathd8.tre)[solcross.data$tip1[i],solcross.data$tip2[i]])
}
return(d)
}
test <- get.tree.dist(cross.data,nj.gg)
test <- get.tree.dist(cross.data,nj.gg)
test
heatmap(cophenetic.phylo(nj.gg), cexRow = 0.2, cexCol = 0.2)
heatmap(cophenetic.phylo(nj.gg), cexRow = 0.2, cexCol = 0.2)
#note: error appears, "reading FASTA file cvx.unaln.fasta: ignored 361 invalid one-letter sequence codes"
al.dan <- AlignSeqs(unal.dna)
plot(cophenetic)
unlink('cvx.unaln.fasta')
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
install.packages("BiocManager")
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
install.packages("BiocManager")
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
BiocManager::install("ggtree")
BiocManager::install("phytools")
tinytex::install_tinytex()
install.packages('BiocManager', repos=c('https://cran.rstudio.com'), ask=FALSE)
BiocManager::install('DECIPHER')
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
BiocManager::install("ggtree")
BiocManager::install("phytools")
tinytex::install_tinytex()
install.packages('BiocManager', repos=c('https://cran.rstudio.com'), ask=FALSE)
BiocManager::install('DECIPHER')
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
BiocManager::install("ggtree")
BiocManager::install("phytools")
tinytex::install_tinytex()
install.packages('BiocManager', repos=c('https://cran.rstudio.com'), ask=FALSE)
BiocManager::install('DECIPHER')
cvx.kr.al.trimmed.loc
cvx.kr.al.trimmed.loc <- 'https://raw.githubusercontent.com/pseudocrater/cactusvirusx/master/data/genbank_kr_consensus_extraction_al_trimmed.fasta'
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
BiocManager::install("ggtree")
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
BiocManager::install("ggtree")
BiocManager::install("phytools")
tinytex::install_tinytex()
install.packages('BiocManager', repos=c('https://cran.rstudio.com'), ask=FALSE)
BiocManager::install('DECIPHER')
install.packages("BiocManager", repos = c("https://cran.rstudio.com"), ask = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
BiocManager::install("ggtree")
BiocManager::install("phytools")
tinytex::install_tinytex()
install.packages('BiocManager', repos=c('https://cran.rstudio.com'), ask=FALSE)
BiocManager::install('DECIPHER')
cvx.kr.al.trimmed.loc <- 'https://raw.githubusercontent.com/pseudocrater/cactusvirusx/master/data/genbank_kr_consensus_extraction_al_trimmed.fasta'
cvx.kr.al.trimmed <- getURL(cvx.kr.al.trimmed.loc)
library(ape)
library(ggtree) # tree plotting
library(DECIPHER)
library(RCurl) # web page loading
library(phangorn)
library(phytools)
library(ape)
library("knitr")
library(DECIPHER)
cvx.kr.al.trimmed.loc <- 'https://raw.githubusercontent.com/pseudocrater/cactusvirusx/master/data/genbank_kr_consensus_extraction_al_trimmed.fasta'
cvx.kr.al.trimmed <- getURL(cvx.kr.al.trimmed.loc)
write(cvx.kr.al.trimmed, file = 'cvx.kr.al.trimmed.fasta')
metadata.loc <- 'https://raw.githubusercontent.com/pseudocrater/cactusvirusx/master/data/cvx_hostdata_v3.csv'
cvx.seq.metadata.csv <-getURL(metadata.loc)
write(x=cvx.seq.metadata.csv, file='cvx.seq.metadata.csv')
cvx.metadata <- read.csv('cvx.seq.metadata.csv', stringsAsFactors = FALSE)
#create vector for host information
hostinfo <- data.frame(nj.gg$tip.label)
cvx.kr.al.trimmed
class(cvx.kr.al.trimmed)
unal.f <- '../data/genbank_kr_consensus_extraction_unal.fasta'
al.f <- '../data/genbank_kr_consensus_extraction_al.fasta'
unal.dna <- readDNAStringSet(unal.f)
al.dna <- AlignSeqs(
unal.dna,
guideTree = NULL,
iterations = 100,
refinements = 0,
gapOpening = c(-18, -16),
gapExtension = c(-2, -1),
# levels = c(0.9, 0.7, 0.7, 0.4, 10, 5, 5, 2),
#         AA   AA   NT   NT
levels=c(0.0, 0.0, 0.0, 0.0, 1, 5, 5, 2),
restrict=c(-1e1000, 1e1000, 1e1000),
processors = 4,
verbose = TRUE)
library(treeio)
read.iqtree('../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.iqtree')
?read.iqtree
tre <- read.iqtree('../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.iqtree')
tre <- read.iqtree("../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.iqtree")
tre <- read.iqtree("..data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.iqtree")
tre <- read.iqtree("../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.iqtree")
tre.f  <- "../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.iqtree"
tre <- read.iqtree(tre.f)
tre.f  <- "../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.newick"
tre <- read.newick(tre.f)
tre.f  <- "../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.newick"
cvx.newick.tree <- read.newick(tre.f)
cvx.newick.tree$tip.label
metadata.loc <- 'https://raw.githubusercontent.com/pseudocrater/cactusvirusx/master/data/cvx_hostdata_v3.csv'
cvx.seq.metadata.csv <-getURL(metadata.loc)
write(x=cvx.seq.metadata.csv, file='cvx.seq.metadata.csv')
cvx.metadata <- read.csv('cvx.seq.metadata.csv', stringsAsFactors = FALSE)
#create vector for host information
hostinfo <- data.frame(cvx.newick.tree$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$cvx.newick.tree.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- midpoint.root(cvx.newick.tree)
nj.gg <- tip.rename.org(cvx.newick.tree)
nj.gg <- tip.rename.org(cvx.newick.tree, cvx.metadata)
cvx.newick.tree$tip.label[5]
cvx.newick.tree$tip.label[6]
cvx.newick.tree$tip.label
tre.f  <- "../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.newick"
cvx.newick.tree <- read.newick(tre.f)
library(ggtree) # tree plotting
library(DECIPHER)
library(RCurl) # web page loading
library(phangorn)
library(phytools)
library(ape)
library("knitr")
library(DECIPHER)
knitr::opts_chunk$set(error = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
install.packages("BiocManager")
library(ggtree) # tree plotting
library(DECIPHER)
library(RCurl) # web page loading
library(phangorn)
library(phytools)
library(ape)
library("knitr")
library(DECIPHER)
tre.f  <- "../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.newick"
cvx.newick.tree <- read.newick(tre.f)
metadata.loc <- 'https://raw.githubusercontent.com/pseudocrater/cactusvirusx/master/data/cvx_hostdata_v3.csv'
cvx.seq.metadata.csv <-getURL(metadata.loc)
write(x=cvx.seq.metadata.csv, file='cvx.seq.metadata.csv')
cvx.metadata <- read.csv('cvx.seq.metadata.csv', stringsAsFactors = FALSE)
#create vector for host information (this is to insure that the vector is the right size -- tip labels will be overwritten)
hostinfo <- data.frame(cvx.newick.tree$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$cvx.newick.tree.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- midpoint.root(cvx.newick.tree)
nj.gg <- tip.rename.org(cvx.newick.tree, cvx.metadata)
cvx.newick.tree$tip.label[4]
cvx.metadata <- read.csv('../data/cvx_hostdata_v3.csv', stringsAsFactors = FALSE)
#create vector for host information (this is to insure that the vector is the right size -- tip labels will be overwritten)
hostinfo <- data.frame(cvx.newick.tree$tip.label)
#create vector for host information (this is to insure that the vector is the right size -- tip labels will be overwritten)
hostinfo <- data.frame(cvx.newick.tree$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$cvx.newick.tree.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- midpoint.root(cvx.newick.tree)
nj.gg <- tip.rename.org(cvx.newick.tree, cvx.metadata)
cvx.newick.tree$tip.label[4]
cvx.metadata <- read.csv('../data/cvx_hostdata_v3.csv', stringsAsFactors = FALSE)
#create vector for host information (this is to insure that the vector is the right size -- tip labels will be overwritten)
hostinfo <- data.frame(cvx.newick.tree$tip.label)
cvx.newick.tree$tip.label
#create vector for host information (this is to insure that the vector is the right size -- tip labels will be overwritten)
hostinfo <- data.frame(cvx.newick.tree$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$cvx.newick.tree.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- midpoint.root(cvx.newick.tree)
nj.gg <- tip.rename.org(cvx.newick.tree, cvx.metadata)
cvx.metadata <- read.csv('../data/cvx_hostdata_v3.csv', stringsAsFactors = FALSE)
#create vector for host information (this is to insure that the vector is the right size -- tip labels will be overwritten)
hostinfo <- data.frame(cvx.newick.tree$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$cvx.newick.tree.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- midpoint.root(cvx.newick.tree)
nj.gg <- tip.rename.org(cvx.newick.tree, cvx.metadata)
cvx.newick.tree$tip.label
cvx.metadata <- read.csv('../data/cvx_hostdata_v3.csv', stringsAsFactors = FALSE)
#create vector for host information (this is to insure that the vector is the right size -- tip labels will be overwritten)
hostinfo <- data.frame(cvx.newick.tree$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$cvx.newick.tree.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- midpoint.root(cvx.newick.tree)
nj.gg <- tip.rename.org(cvx.newick.tree, cvx.metadata)
cvx.newick.tree$tip.label
#create vector for host information (this is to insure that the vector is the right size -- tip labels will be overwritten)
hostinfo <- data.frame(cvx.newick.tree$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$cvx.newick.tree.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- midpoint.root(cvx.newick.tree)
nj.gg <- tip.rename.org(cvx.newick.tree, cvx.metadata)
cvx.metadata <- read.csv('../data/cvx_hostdata_v3.csv', stringsAsFactors = FALSE)
#create vector for host information (this is to insure that the vector is the right size -- tip labels will be overwritten)
hostinfo <- data.frame(cvx.newick.tree$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$cvx.newick.tree.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- midpoint.root(cvx.newick.tree)
nj.gg <- tip.rename.org(cvx.newick.tree, cvx.metadata)
cvx.metadata <- read.csv('../data/cvx_hostdata_v3.csv', stringsAsFactors = FALSE)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$cvx.newick.tree.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
#create vector for host information (this is to insure that the vector is the right size -- tip labels will be overwritten)
hostinfo <- data.frame(cvx.newick.tree$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$cvx.newick.tree.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- midpoint.root(cvx.newick.tree)
nj.gg <- tip.rename.org(cvx.newick.tree, cvx.metadata)
cvx.metadata <- read.csv('../data/cvx_hostdata_v3.csv', stringsAsFactors = FALSE)
#create vector for host information (this is to insure that the vector is the right size -- tip labels will be overwritten)
hostinfo <- data.frame(cvx.newick.tree$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$cvx.newick.tree.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- midpoint.root(cvx.newick.tree)
nj.gg <- tip.rename.org(cvx.newick.tree, cvx.metadata)
a
cross.data <- expand.grid(tip1 = cvx.newick.tree$tip.label, tip2 = cvx.newick.tree$tip.label)
d<- c()
get.tree.dist = function(solcross.data,pathd8.tre)
{
for(i in 1:length(solcross.data$tip1))
{
ifelse(is.na(match(solcross.data$tip1[i],pathd8.tre$tip.label)) | is.na(match(solcross.data$tip2[i],pathd8.tre$tip.label)),d[i]<-NA,
d[i]<-cophenetic.phylo(pathd8.tre)[solcross.data$tip1[i],solcross.data$tip2[i]])
}
return(d)
}
test <- get.tree.dist(cross.data,cvx.newick.tree)
heatmap(cophenetic.phylo(cvx.newick.tree), cexRow = 0.2, cexCol = 0.2)
heatmap(cophenetic.phylo(cvx.newick.tree), cexRow = 0.2, cexCol = 0.2)
heatmap(cophenetic.phylo(cvx.newick.tree), cexRow = 0.3, cexCol = 0.3)
heatmap(cophenetic.phylo(cvx.newick.tree), cexRow = 0.3, cexCol = 0.3)
heatmap(cophenetic.phylo(cvx.newick.tree), cexRow = 0.2, cexCol = 0.2)
plot()
plot(new)
plot.new()
heatmap(cophenetic.phylo(cvx.newick.tree), cexRow = 0.2, cexCol = 0.2)
heatmap(cophenetic.phylo(cvx.newick.tree), cexRow = 0.3, cexCol = 0.3)
plot.new()
heatmap(cophenetic.phylo(cvx.newick.tree), cexRow = 0.3, cexCol = 0.3)
