cvx.nj <- NJ(dist.dna(cvx.aln.bin))
cvx.init.aln.fasta <- getURL(aln.fasta.loc)
cvx.init.aln.fasta
aln.fasta.loc <- 'https://raw.githubusercontent.com/pseudocrater/cactusvirusx/master/data/genbank_KR_viruses_aln_v3.fasta'
cvx.init.aln.fasta <- getURL(aln.fasta.loc)
cvx.metadata <- read.csv('cvx.seq.metadata.csv', stringsAsFactors = FALSE)
#alphabetize metadata, only needs to be done once:
#cvx.metadata <- cvx.metadata[order(cvx.metadata$Name),]
#write.csv(cvx.metadata, file="test.csv")
#cvx.metadata <- read.csv('test.csv', stringsAsFactors = FALSE)
write(x=cvx.seq.metadata.csv, file='cvx.seq.metadata.csv')
write(cvx.init.aln.fasta, file = 'cvx.init.aln.fasta')
cacti.aln <- read.dna(file = 'cvx.init.aln.fasta', format= "fasta")
cvx.aln.phy <- read.phyDat('cvx.init.aln.fasta', format='fasta', type='DNA')
cvx.aln.bin <- as.DNAbin(cvx.aln.phy)
cvx.nj <- NJ(dist.dna(cvx.aln.bin))
length(nj.gg$tip.label)
write.tree(cvx.nj, file="cvx.njtree.nwk")
nj.gg <- read.tree(file="cvx.njtree.nwk")
nj.gg <- midpoint.root(nj.gg)
length(nj.gg$tip.label)
rep(c(1,2,3), times=2)
rep(c(1,2,3), times=3)
rep(list(1,2,3), times=3)
rep(list(1:3), times=3)
list(rep(1:3, times=2))
rep(list(c(1:3)), times=2))
rep(list(c(1:3), times=2))
rep(list(c(1:3)), times=2)
list(1:3)
?list
?apply
lapply(c("blue", "green"), 2, rep(x, times=2))
lapply(c("blue", "green"),rep(x, times=2))
lapply(c("blue", "green"), rep(times=2))
lapply(c("blue", "green"), rep)
rep(1:3, nj.gg$tip.label)
rep(1:3, times=nj.gg$tip.label)
rep(1:3, times=list(nj.gg$tip.label)
)
rep(1:4, times=list(nj.gg$tip.label))
rep(1:4, length(nj.gg$tip.label))
?expand.grid
expand.grid(tip1 = nj.gg$tip.label, sex = c("Male","Female"))
#create said list, or use your own for specific pairs.
cross.data <- expand.grid(tip1 = nj.gg$tip.label, tip2 = nj.gg$tip.label)
typeof(cross.data)
cross.data$tip1[1]
cross.data$tip2[1]
get.tree.dist = function(solcross.data,pathd8.tre)
{
for(i in 1:length(solcross.data$tip1))
{
ifelse(is.na(match(solcross.data$tip1[i],pathd8.tre$tip.label)) | is.na(match(solcross.data$tip2[i],
pathd8.tre$tip.label)),d[i]<-NA,
d[i]<-cophenetic.phylo(pathd8.tre)[solcross.data$tip1[i],solcross.data$tip2[i]])
}
return(d)
}
get.tree.dist(cross.data, nj.gg)
#create said list, or use your own for specific pairs.
cross.data <- expand.grid(tip1 = nj.gg$tip.label[1:10], tip2 = nj.gg$tip.label1:10)
#create said list, or use your own for specific pairs.
cross.data <- expand.grid(tip1 = nj.gg$tip.label[1:10], tip2 = nj.gg$tip.label[1:10])
get.tree.dist(cross.data, nj.gg)
cophenetic.phylo()
?cophenetic.phylo
dist.nodes(nj.gg)
nj.phylo <- phylo.read(nj.gg, "newick")
nj.phylo <- Phylo.read(nj.gg, "newick")
typeof(nj.gg)
nj.gg <- read.tree(file="cvx.njtree.nwk")
nj.gg <- midpoint.root(nj.gg)
typeof(nj.gg)
class(nj.gg)
head(cophenetic.phylo(nj.gg))
nj.gg <- midpoint.root(nj.gg)
nj.gg <- tip.rename.org(nj.gg,cvx.metadata)
for(i in 1:length(tree$tip.label)){
hostinfo$nj.gg.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
#create vector for host information
hostinfo <- data.frame(nj.gg$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$nj.gg.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- read.tree(file="cvx.njtree.nwk")
nj.gg <- midpoint.root(nj.gg)
nj.gg <- tip.rename.org(nj.gg,cvx.metadata)
get.tree.dist(cross.data,nj.gg)
match(cross.data$tip1[1],nj.gg$tip.label)
cross.data$tip1[1]
cross.data$tip1[1][1]
cross.data$tip1
cross.data[1]
cross.data[1][1]
cross.data[,1]
cross.data[1,]
cross.data[2,]
cross.data[3,]
#create vector for host information
hostinfo <- data.frame(nj.gg$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$nj.gg.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- read.tree(file="cvx.njtree.nwk")
nj.gg <- midpoint.root(nj.gg)
nj.gg <- tip.rename.org(nj.gg,cvx.metadata)
nj.gg$tip.label
cophenetic.phylo(nj.gg)
#create example list, or use your own for specific pairs. for all combos use dist.nodes(nj.gg)
cross.data <- expand.grid(tip1 = nj.gg$tip.label[1:10], tip2 = nj.gg$tip.label[1:10])
cross.data
cross.data$tip1[1]
cophenetic.phylo(nj.gg)[cross.data$tip1[1]]
cophenetic.phylo(nj.gg)[cross.data$tip1[1]
]
heatmap(cophenetic.phylo(nj.gg))
par( mar=c(1, 1, 0, 0))
heatmap(cophenetic.phylo(nj.gg))
par( mar=c(2, 2, 2, 2))
heatmap(cophenetic.phylo(nj.gg))
legend(x="bottomright", legend=c("min", "ave", "max"),
fill=colorRampPalette(brewer.pal(8, "Oranges"))(3))
heatmap(cophenetic.phylo(nj.gg))
par( mar=c(2, 2, 2, 2))
heatmap(cophenetic.phylo(nj.gg))
legend(x="bottomright", legend=c("min", "ave", "max"),
fill=colorRampPalette(brewer.pal(8, "Oranges"))(3))
heatmap(cophenetic.phylo(nj.gg))
cophenetic.phylo(nj.gg)
view()
cophenetic <- cophenetic.phylo(nj.gg)
View(cophenetic)
View(cophenetic)
cophenetic.phylo(nj.gg)[1,2]
cophenetic.phylo(nj.gg)["Virus from SRR11190800 Plant: BSJ-2","Virus from SRR11190800 Plant: BSJ-2"]
cophenetic.phylo(nj.gg)["Virus from SRR11190800 Plant: BSJ-2","Virus from SRR11190800 Plant: BSJ-3"]
cophenetic.phylo(nj.gg)[1,2]
cophenetic.phylo(nj.gg)["Virus from SRR11190800 Plant: BSJ-2","Virus from SRR11190800 Plant: BSJ-2"]
cophenetic.phylo(nj.gg)["Virus from SRR11190800 Plant: BSJ-2","Virus from SRR11190800 Plant: BSJ-3"]
View(hosts.df)
cophenetic.phylo(nj.gg)["Virus from SRR11190800 Plant: BSJ-2","Virus from SRR11190799 Plant: BSJ−3"]
size()
?size
summary(cophenetic)
cophenetic.phylo(nj.gg)["Virus from SRR11190800 Plant: BSJ-2","Pitaya virus X"]
cophenetic.phylo(nj.gg)["Virus from SRR11190801 Plant: DH−2","Pitaya virus X"]
cophenetic.phylo(nj.gg)["Virus_from_SRR11190801_Plant:_DH−2","Pitaya virus X"]
cophenetic.phylo(nj.gg)["Virus from SRR11190792 Plant: BR-3","Pitaya virus X"]
cophenetic.phylo(nj.gg)["Virus from SRR11190793 Plant: BR-2","Pitaya virus X"]
#create example list, or use your own for specific pairs. for all combos use dist.nodes(nj.gg)
cross.data <- expand.grid(tip1 = c("Virus from SRR11190799 Plant: BSJ−3", "Virus from SRR11190791 Plant: BSJ−1", "Virus from SRR11190800 Plant: BSJ−2", "Virus from SRR11190798 Plant: DH−3","Virus from SRR11190801 Plant: DH−2"), tip2 = c("Virus from SRR11190799 Plant: BSJ−3", "Virus from SRR11190791 Plant: BSJ−1", "Virus from SRR11190800 Plant: BSJ−2", "Virus from SRR11190798 Plant: DH−3","Virus from SRR11190801 Plant: DH−2"))
cross.data[1,2]
cross.data[,2]
cross.data[1,]
cophenetic.phylo(nj.gg)["Virus from SRR11190799 Plant: BSJ−3","Pitaya virus X"]
cross.data[2,]
cophenetic.phylo(nj.gg)["Virus from SRR11190799 Plant: BSJ−3","Virus from SRR11190791 Plant: BSJ−1"]
cophenetic.phylo(nj.gg)["Virus from SRR11190799 Plant: BSJ-3","Virus from SRR11190791 Plant: BSJ-1"]
#create example list, or use your own for specific pairs. for all combos use dist.nodes(nj.gg)
cross.data <- expand.grid(tip1 = c("Virus from SRR11190799 Plant: BSJ-3", "Virus from SRR11190791 Plant: BSJ-1", "Virus from SRR11190800 Plant: BSJ-2", "Virus from SRR11190798 Plant: DH-3","Virus from SRR11190801 Plant: DH-2"), tip2 = c("Virus from SRR11190799 Plant: BSJ-3", "Virus from SRR11190791 Plant: BSJ-1", "Virus from SRR11190800 Plant: BSJ-2", "Virus from SRR11190798 Plant: DH-3","Virus from SRR11190801 Plant: DH-2"))
get.tree.dist(cross.data, nj.gg)
d<- c()
get.tree.dist = function(solcross.data,pathd8.tre)
{
for(i in 1:length(solcross.data$tip1))
{
ifelse(is.na(match(solcross.data$tip1[i],pathd8.tre$tip.label)) | is.na(match(solcross.data$tip2[i],pathd8.tre$tip.label)),d[i]<-NA,
d[i]<-cophenetic.phylo(pathd8.tre)[solcross.data$tip1[i],solcross.data$tip2[i]])
}
return(d)
}
get.tree.dist(cross.data,nj.gg)
cross.data
get.tree.dist(cross.data,nj.gg)
#create example list, or use your own for specific pairs. for all combos use dist.nodes(nj.gg)
data <- c("Cactus virus X: KM365479.1", "Virus from SRR11190799 Plant: BSJ-3", "Virus from SRR11190791 Plant: BSJ-1", "Virus from SRR11190800 Plant: BSJ-2", "Virus from SRR11190798 Plant: DH-3","Virus from SRR11190801 Plant: DH-2")
cross.data <- expand.grid(tip1 = data, tip2 = data)
get.tree.dist(cross.data,nj.gg)
average(get.tree.dist(cross.data,nj.gg))
test <- get.tree.dist(cross.data,nj.gg)
test
average(test)
mean(test)
#create example list, or use your own for specific pairs. for all combos use dist.nodes(nj.gg)
data <- c("Virus from SRR11190799 Plant: BSJ-3", "Virus from SRR11190791 Plant: BSJ-1", "Virus from SRR11190800 Plant: BSJ-2")
cross.data <- expand.grid(tip1 = data, tip2 = data)
test <- get.tree.dist(cross.data,nj.gg)
par( mar=c(2, 2, 2, 2))
test
average(test)
mean(test)
data <- c("Virus from SRR11190798 Plant: DH-3", "Virus from SRR11190801 Plant: DH-2")
cross.data <- expand.grid(tip1 = data, tip2 = data)
test <- get.tree.dist(cross.data,nj.gg)
tet
test
average(test)
mean(test)
data <- c("Virus from SRR11603183 GW-peel-2", "Virus from SRR11603182 GW-peel-3")
cross.data <- expand.grid(tip1 = data, tip2 = data)
test <- get.tree.dist(cross.data,nj.gg)
mean(test)
test <- get.tree.dist(cross.data,nj.gg)
data <- c("Virus from SRR11603183 GW-peel-2", "Virus from SRR11603182 GW-peel-3")
cross.data <- expand.grid(tip1 = data, tip2 = data)
d<- c()
get.tree.dist = function(solcross.data,pathd8.tre)
{
for(i in 1:length(solcross.data$tip1))
{
ifelse(is.na(match(solcross.data$tip1[i],pathd8.tre$tip.label)) | is.na(match(solcross.data$tip2[i],pathd8.tre$tip.label)),d[i]<-NA,
d[i]<-cophenetic.phylo(pathd8.tre)[solcross.data$tip1[i],solcross.data$tip2[i]])
}
return(d)
}
test <- get.tree.dist(cross.data,nj.gg)
mean(test)
data <- c("Virus from SRR11603183 GW-peel-2", "Virus from SRR11603182 GW-peel-3")
cross.data <- expand.grid(tip1 = data, tip2 = data)
test <- get.tree.dist(cross.data,nj.gg)
mean(test)
data <- c("Virus from SRR11190798 Plant: DH-3", "Virus from SRR11190801 Plant: DH-2")
cross.data <- expand.grid(tip1 = data, tip2 = data)
test <- get.tree.dist(cross.data,nj.gg)
mean(test)
test
data <- c("Virus from SRR11603183 GW-peel-2", "Virus from SRR11603182 GW-peel-3")
cross.data <- expand.grid(tip1 = data, tip2 = data)
test <- get.tree.dist(cross.data,nj.gg)
test
mean(test[test!=0])
#create example list, or use your own for specific pairs. for all combos use dist.nodes(nj.gg)
data <- c("Virus from SRR11190799 Plant: BSJ-3", "Virus from SRR11190791 Plant: BSJ-1", "Virus from SRR11190800 Plant: BSJ-2")
cross.data <- expand.grid(tip1 = data, tip2 = data)
test <- get.tree.dist(cross.data,nj.gg)
mean(test[test!=0])
get.tree.dist = function(solcross.data,pathd8.tre)
{
for(i in 1:length(solcross.data$tip1))
{
ifelse(is.na(match(solcross.data$tip1[i],pathd8.tre$tip.label)) | is.na(match(solcross.data$tip2[i],pathd8.tre$tip.label)),d[i]<-NA,
d[i]<-cophenetic.phylo(pathd8.tre)[solcross.data$tip1[i],solcross.data$tip2[i]])
}
return(d)
}
test <- get.tree.dist(cross.data,nj.gg)
mean(test[test!=0])
#create example list, or use your own for specific pairs. for all combos use dist.nodes(nj.gg)
data <- c("Virus from SRR11190799 Plant: BSJ-3", "Virus from SRR11190791 Plant: BSJ-1", "Virus from SRR11190800 Plant: BSJ-2")
cross.data <- expand.grid(tip1 = data, tip2 = data)
d<- c()
test <- get.tree.dist(cross.data,nj.gg)
mean(test[test!=0])
test
data <- c("Schlumbergera_truncata_15H-03_pol_S48_potexvirus_-_NC_002815_consensus_sequence", "Schlumbergera_truncata__15H3__s_S50_potexvirus_-_NC_002815_consensus_sequence", "Schlumbergera_truncata_15H3_sty_S73_potexvirus_-_NC_002815_consensus_sequence")
cross.data <- expand.grid(tip1 = data, tip2 = data)
d<- c()
test <- get.tree.dist(cross.data,nj.gg)
mean(test[test!=0])
test <- get.tree.dist(cross.data,nj.gg)
test
data <- c("Schlumbergera_truncata_15H-03_pol_S48_potexvirus_-_NC_002815_consensus_sequence", "Schlumbergera_truncata__15H3__s_S50_potexvirus_-_NC_002815_consensus_sequence", "Schlumbergera_truncata_15H3_sty_S73_potexvirus_-_NC_002815_consensus_sequence")
cophenetic.phylo(nj.gg)["Schlumbergera_truncata_15H-03_pol_S48_potexvirus_-_NC_002815_consensus_sequence", "Schlumbergera_truncata__15H3__s_S50_potexvirus_-_NC_002815_consensus_sequence"]
data <- c("Virus from 15H-03_pol_S48", "Virus from 15H3_sty_S73","Virus from 15H3__s_S50")
cross.data <- expand.grid(tip1 = data, tip2 = data)
d<- c()
test <- get.tree.dist(cross.data,nj.gg)
test
table(test)
heatmap(test)
heatmap(cophenetic.phylo(nj.gg))
heatmap.2(cophenetic.phylo(nj.gg))
heatmap(cophenetic.phylo(nj.gg), cexRow = 0.5, cexCol = 0.5)
heatmap(cophenetic.phylo(nj.gg), cexRow = 0.1, cexCol = 0.1)
heatmap(cophenetic.phylo(nj.gg), cexRow = 0.2, cexCol = 0.2)
heatmap(cophenetic.phylo(nj.gg), cexRow = 0.2, cexCol = 0.2)
library(ggtree) # tree plotting
library(DECIPHER)
library(RCurl) # web page loading
library(phangorn)
library(phytools)
library(ape)
library("knitr")
library(DECIPHER)
aln.fasta.loc <- 'https://raw.githubusercontent.com/pseudocrater/cactusvirusx/master/data/genbank_KR_viruses_consensus_aln.fasta'
cvx.init.aln.fasta <- getURL(aln.fasta.loc)
cvx.unaln.fasta <- getURL(cvx.unaln.fasta.loc)
write(cvx.unaln.fasta, file = 'cvx.unaln.fasta')
cvx.seq.metadata.csv <-getURL(metadata.loc)
write(x=cvx.seq.metadata.csv, file='cvx.seq.metadata.csv')
cvx.metadata <- read.csv('cvx.seq.metadata.csv', stringsAsFactors = FALSE)
#alphabetize metadata, only needs to be done once:
#cvx.metadata <- cvx.metadata[order(cvx.metadata$Name),]
#write.csv(cvx.metadata, file="test.csv")
#cvx.metadata <- read.csv('test.csv', stringsAsFactors = FALSE)
write(x=cvx.seq.metadata.csv, file='cvx.seq.metadata.csv')
write(cvx.init.aln.fasta, file = 'cvx.init.aln.fasta')
cacti.aln <- read.dna(file = 'cvx.init.aln.fasta', format= "fasta")
cvx.aln.phy <- read.phyDat('cvx.init.aln.fasta', format='fasta', type='DNA')
cvx.aln.bin <- as.DNAbin(cvx.aln.phy)
cvx.nj <- NJ(dist.dna(cvx.aln.bin))
write.tree(cvx.nj, file="cvx.njtree.nwk")
nj.gg <- read.tree(file="cvx.njtree.nwk")
nj.gg <- midpoint.root(nj.gg)
#create vector for host information
hostinfo <- data.frame(nj.gg$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$nj.gg.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- read.tree(file="cvx.njtree.nwk")
nj.gg <- midpoint.root(nj.gg)
nj.gg <- tip.rename.org(nj.gg,cvx.metadata)
cross.data <- expand.grid(tip1 = nj.gg$tip.label, tip2 = nj.gg$tip.label)
d<- c()
get.tree.dist = function(solcross.data,pathd8.tre)
{
for(i in 1:length(solcross.data$tip1))
{
ifelse(is.na(match(solcross.data$tip1[i],pathd8.tre$tip.label)) | is.na(match(solcross.data$tip2[i],pathd8.tre$tip.label)),d[i]<-NA,
d[i]<-cophenetic.phylo(pathd8.tre)[solcross.data$tip1[i],solcross.data$tip2[i]])
}
return(d)
}
test <- get.tree.dist(cross.data,nj.gg)
test <- get.tree.dist(cross.data,nj.gg)
test
heatmap(cophenetic.phylo(nj.gg), cexRow = 0.2, cexCol = 0.2)
heatmap(cophenetic.phylo(nj.gg), cexRow = 0.2, cexCol = 0.2)
#note: error appears, "reading FASTA file cvx.unaln.fasta: ignored 361 invalid one-letter sequence codes"
al.dan <- AlignSeqs(unal.dna)
plot(cophenetic)
unlink('cvx.unaln.fasta')
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
install.packages("BiocManager")
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
install.packages("BiocManager")
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
BiocManager::install("ggtree")
BiocManager::install("phytools")
tinytex::install_tinytex()
install.packages('BiocManager', repos=c('https://cran.rstudio.com'), ask=FALSE)
BiocManager::install('DECIPHER')
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
BiocManager::install("ggtree")
BiocManager::install("phytools")
tinytex::install_tinytex()
install.packages('BiocManager', repos=c('https://cran.rstudio.com'), ask=FALSE)
BiocManager::install('DECIPHER')
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
BiocManager::install("ggtree")
BiocManager::install("phytools")
tinytex::install_tinytex()
install.packages('BiocManager', repos=c('https://cran.rstudio.com'), ask=FALSE)
BiocManager::install('DECIPHER')
cvx.kr.al.trimmed.loc
cvx.kr.al.trimmed.loc <- 'https://raw.githubusercontent.com/pseudocrater/cactusvirusx/master/data/genbank_kr_consensus_extraction_al_trimmed.fasta'
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
BiocManager::install("ggtree")
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
BiocManager::install("ggtree")
BiocManager::install("phytools")
tinytex::install_tinytex()
install.packages('BiocManager', repos=c('https://cran.rstudio.com'), ask=FALSE)
BiocManager::install('DECIPHER')
install.packages("BiocManager", repos = c("https://cran.rstudio.com"), ask = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#install needed packages
install.packages('BiocManager')# This option gave B errors; repos=c('https://cran.rstudio.com'), ask=F)
BiocManager::install('DECIPHER')
BiocManager::install("ggtree")
BiocManager::install("phytools")
tinytex::install_tinytex()
install.packages('BiocManager', repos=c('https://cran.rstudio.com'), ask=FALSE)
BiocManager::install('DECIPHER')
cvx.kr.al.trimmed.loc <- 'https://raw.githubusercontent.com/pseudocrater/cactusvirusx/master/data/genbank_kr_consensus_extraction_al_trimmed.fasta'
cvx.kr.al.trimmed <- getURL(cvx.kr.al.trimmed.loc)
library(ape)
library(ggtree) # tree plotting
library(DECIPHER)
library(RCurl) # web page loading
library(phangorn)
library(phytools)
library(ape)
library("knitr")
library(DECIPHER)
cvx.kr.al.trimmed.loc <- 'https://raw.githubusercontent.com/pseudocrater/cactusvirusx/master/data/genbank_kr_consensus_extraction_al_trimmed.fasta'
cvx.kr.al.trimmed <- getURL(cvx.kr.al.trimmed.loc)
write(cvx.kr.al.trimmed, file = 'cvx.kr.al.trimmed.fasta')
metadata.loc <- 'https://raw.githubusercontent.com/pseudocrater/cactusvirusx/master/data/cvx_hostdata_v3.csv'
cvx.seq.metadata.csv <-getURL(metadata.loc)
write(x=cvx.seq.metadata.csv, file='cvx.seq.metadata.csv')
cvx.metadata <- read.csv('cvx.seq.metadata.csv', stringsAsFactors = FALSE)
#create vector for host information
hostinfo <- data.frame(nj.gg$tip.label)
cvx.kr.al.trimmed
class(cvx.kr.al.trimmed)
unal.f <- '../data/genbank_kr_consensus_extraction_unal.fasta'
al.f <- '../data/genbank_kr_consensus_extraction_al.fasta'
unal.dna <- readDNAStringSet(unal.f)
al.dna <- AlignSeqs(
unal.dna,
guideTree = NULL,
iterations = 100,
refinements = 0,
gapOpening = c(-18, -16),
gapExtension = c(-2, -1),
# levels = c(0.9, 0.7, 0.7, 0.4, 10, 5, 5, 2),
#         AA   AA   NT   NT
levels=c(0.0, 0.0, 0.0, 0.0, 1, 5, 5, 2),
restrict=c(-1e1000, 1e1000, 1e1000),
processors = 4,
verbose = TRUE)
library(treeio)
read.iqtree('../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.iqtree')
?read.iqtree
tre <- read.iqtree('../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.iqtree')
tre <- read.iqtree("../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.iqtree")
tre <- read.iqtree("..data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.iqtree")
tre <- read.iqtree("../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.iqtree")
tre.f  <- "../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.iqtree"
tre <- read.iqtree(tre.f)
tre.f  <- "../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.newick"
tre <- read.newick(tre.f)
tre.f  <- "../data/iqtree-output/genbank_kr_consensus_extraction_al_trimmed.fasta.newick"
cvx.newick.tree <- read.newick(tre.f)
cvx.newick.tree$tip.label
metadata.loc <- 'https://raw.githubusercontent.com/pseudocrater/cactusvirusx/master/data/cvx_hostdata_v3.csv'
cvx.seq.metadata.csv <-getURL(metadata.loc)
write(x=cvx.seq.metadata.csv, file='cvx.seq.metadata.csv')
cvx.metadata <- read.csv('cvx.seq.metadata.csv', stringsAsFactors = FALSE)
#create vector for host information
hostinfo <- data.frame(cvx.newick.tree$tip.label)
#rename tree tips and populate vector
tip.rename.org = function(tree,dataframe){
for(i in 1:length(tree$tip.label)){
hostinfo$cvx.newick.tree.tip.label[i] <<- dataframe$host[grep(tree$tip.label[i],dataframe$Name)]
#uncomment these for troubleshooting:
print(i)
print(tree$tip.label[i])
print(dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)])
tree$tip.label[i]<-dataframe$Organism[grep(tree$tip.label[i],dataframe$Name)]
}
tree
}
nj.gg <- midpoint.root(cvx.newick.tree)
nj.gg <- tip.rename.org(cvx.newick.tree)
nj.gg <- tip.rename.org(cvx.newick.tree, cvx.metadata)
cvx.newick.tree$tip.label[5]
cvx.newick.tree$tip.label[6]
